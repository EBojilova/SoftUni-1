Java:
Java is "platform independent". In Java all methods are virtual. There are plenty of IDEs for Java, both free (e.g. Eclipse, Netbeans) and commercial (e.g. IntelliJ IDEA). C# Is a More Complex Language than Java. Developed by Sun, now owned by Oracle. Java runs on huge number of lpatforms since it uses virtual machines to execute its code.
--------------------------------------------------------------------
Ruby on Rails:
Ruby is an open source language, and as such, it evolves based directly off the needs of its community, whereas C# belongs to Microsoft, who has the final say as to what goes into the language. A typical Rails application has the frontend part, which is html-based. As such, it runs in the browser. Ruby on Rails is just a web application framework, similar to the ASP.NET MVC framework, except that Rails has been around for a longer time. 
--------------------------------------------------------------------
VB.NET:
In the real world, C# programmers tend to make more money because most C# programmers came from C++ which is an object oriented language.  Most vb.net programmers started with vb6 which is not an object oriented language. As time goes on, this will go away, since new programmers start with one of object oriented languages in .Net. Although there are differences between Visual Basic .NET and Visual C# .NET, both are first-class programming languages that are based on the Microsoft .NET Framework, and they are equally powerful. Visual Basic .NET is a true object-oriented programming language that includes new and improved features such as inheritance, polymorphism, interfaces, and overloading. When you must select between Visual Basic .NET and Visual C# .NET, decide primarily based on what you already know and what you are comfortable with. It is easier for Visual Basic 6.0 developers to use Visual Basic .NET and for C++/Java programmers to use Visual C# .NET.
--------------------------------------------------------------------
C++:
C# is a managed language that runs in a virtual machine. It compiles down to a platform agnostic intermediate code. C++ creates raw assemblies that run directly on the target platform. Because C# runs in a virtual machine, memory management is handled automatically. In C++, you must handle memory manually, or write (or acquire) a garbage collection library. C# has a common type hierarchy, C++ does not. All types in C#, even primitives, descend from the class Object, or can act as if they do. C# uses a garbage collector as part of the language spec. Many garbage collectors are available for C++, but this is not built into the language.
--------------------------------------------------------------------
ASP.NET:
C# is the language you use to do all your server side programming like interacting with a database, and consuming the .NET base class library/framework. ASP.NET is the framework where you develop the web pages, this includes all the web and html controls, the rendering to HTML etc. So to create a dynamic site you will need both a server side language C#/VB.NET + ASP.NET for the web pages and its related framework for authentication, state and session management etc. ASP is run under the inetinfo.exe(IIS) process space and hence susceptible to application crashes as a result the IIS needs to be stopped or restarted. ASP is related to the process isolation setting in IIS. ASP.NET pages are always compiled into .NET classes housed within assemblies. This class includes all of the server-side code and the static HTML, so once a page is accessed for the first time (or any page within a particular directory is accessed), subsequent rendering of that page is serviced by executing compiled code. This eliminates all the inefficiencies of the scripting model of traditional ASP. There is no longer any performance difference between compiled components and server-side code embedded within a page they are now both compiled components. 
